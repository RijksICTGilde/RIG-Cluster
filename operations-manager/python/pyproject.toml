[tool.poetry]
name = "opi"
version = "0.1.0"
description = ""
authors = ["Robbert <robbert.uittenbroek@rijksoverheid.nl>"]
readme = "README.md"
license = "EUPL-1.2"
repository = "https://github.com/RijksICTGilde/opi"
keywords = ["A Deployment Manager"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Programming Language :: Python :: 3",
    "Topic :: Deployment :: Infrastructure",
    "Typing :: Typed"
]
package-mode = false

[tool.poetry.dependencies]
python = "^3.13"
fastapi = "^0.115.12"
alembic = "^1.16.1"
pydantic = "2.11.5"
jinja2 = "^3.1.6"
pydantic-settings = "^2.9.1"
psycopg2-binary = "^2.9.10"
uvicorn = {extras = ["standard"], version = "^0.34.2"}
ruamel-yaml = "^0.18.6"
babel = "^2.17.0"
httpx = "^0.28.1"
click = "^8.2.1"
python-ulid = {extras = ["pydantic"], version = "^3.0.0"}
fastapi-csrf-protect = "^1.0.3"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.41"}
sqlalchemy-utils = "^0.41.2"
liccheck = "^0.9.2"
authlib = "^1.6.0"
aiosqlite = "^0.21.0"
asyncpg = "^0.30.0"
async-lru = "^2.0.5"
jinja2-base64-filters = "^0.1.4"
python-multipart = "^0.0.20"
poetry = "^2.1.3"
aiohttp = "^3.12.13"
gitpython = "^3.1.44"
deepdiff = "^8.0.1"
jsonpath-ng = "^1.7.0"
tenacity = "^9.1.2"
jinja-roos-components = {path = "./jinja-roos-components", develop = true}
beautifulsoup4 = "^4.13.4"
lxml = "^6.0.1"


[tool.poetry.group.test.dependencies]
pytest = "^8.3.5"
pytest-asyncio = "^0.26.0"
nest-asyncio = "^1.6.0"
pytest-mock = "^3.14.0"
coverage = "^7.8.2"
playwright = "^1.52.0"
pytest-playwright = "^0.7.0"
pytest-httpx = "^0.35.0"
freezegun = "^1.5.2"
vcrpy = "^7.0.0"
pytest-minio-mock = "^0.4.17"


[tool.poetry.group.dev.dependencies]
ruff = "^0.11.11"
pre-commit = "^4.2.0"
polib = "^1.2.0"
pyright = "^1.1.401"
liccheck = "^0.9.2"
setuptools = "^80.8.0"
djlint = "^1.36.1"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Ruff settings: https://docs.astral.sh/ruff/configuration/
[tool.ruff]
line-length = 120
target-version = "py313"
src = ["opi","tests"]
exclude = ["opi/migrations"]

[tool.ruff.format]
line-ending = "lf"

[tool.ruff.lint]
select = ["I", "SIM", "B", "UP", "F", "E", "S", "C90", "DTZ", "LOG", "PIE", "PT", "ERA", "W", "C", "TRY", "RUF", "ANN"]
fixable = ["ALL"]
task-tags = ["TODO"]
ignore = ["TRY003"]

[tool.ruff.lint.per-file-ignores]
"tests/**.py" = ["S101", "ANN201"]

[tool.ruff.lint.mccabe]
max-complexity = 8

[tool.pyright]
pythonVersion = "3.13"
typeCheckingMode = "strict"
reportMissingImports = true
reportMissingTypeStubs = true
reportUnnecessaryIsInstance = false
exclude = [
    "opi/migrations",
    ".venv",
]

[tool.coverage.run]
branch = true
command_line = "-m pytest"
relative_files = true # needed for sonarcloud code coverage
omit = [
    "tests/*"
]
concurrency = ["greenlet", "thread"]

[tool.coverage.report]
fail_under = 90

[tool.coverage.html]
directory = "htmlcov"
title = "opi"


[tool.pytest.ini_options]
testpaths = [
    "tests"
]
addopts = "--strict-markers -v -q --tracing on"
filterwarnings = [
    "ignore::UserWarning"
]
log_cli = true
log_cli_level = "INFO"
faulthandler_timeout = 60
markers = [
   "slow: marks tests as slow",
   "enable_auth: marks tests that require authentication"
]
pythonpath = "."


[tool.liccheck]
level = "PARANOID"
dependencies = true
authorized_licenses = [
    "Apache Software",
    "Artistic",
    "BSD",
    "BSD",
    "BSD-3-Clause",
    "GNU General Public License v2 or later (GPLv2+)",
    "GNU General Public License v3 or later (GPLv3+)",
    "GNU General Public License (GPL)",
    "GNU Library or Lesser General Public License (LGPL)",
    "MIT",
    "The Unlicense (Unlicense)",
    "ISC License (ISCL)",
    "Mozilla Public License 2.0 (MPL 2.0)",
    "Python Software Foundation",
    "Public Domain"
]
